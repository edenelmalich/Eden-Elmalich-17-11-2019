{"version":3,"sources":["components/layout/Alert.js","actions/alertAction.js","actions/typesActions.js","components/Home.js","actions/getWeatherAction.js","components/Favorites.js","components/Footer.js","components/PagesNav.js","reducers/getWeatherReducer.js","reducers/alertReducer.js","reducers/index.js","store.js","App.js","index.js","img/Weather.png"],"names":["connect","state","alerts","alertReducer","length","map","alert","key","id","className","alertType","msg","setAlert","dispatch","uuid","v4","type","payload","setTimeout","getDefaultWeather","getWeatherReducer","currentWeather","dayDaily","DayTime","City","Fail","getDefaultDetails","cityName","a","apiKey","axios","get","res","data","Key","resData","daysData","DailyForecasts","didMount","useRef","useState","FavoritesData","SetFavorites","getDetails","setDetails","useEffect","current","Favorites","JSON","parse","localStorage","getItem","onChange","e","target","name","value","Form","onSubmit","preventDefault","inline","FormControl","placeholder","Button","variant","Card","bg","text","style","width","Header","city","index","icon","faHeart","onClick","push","setItem","stringify","i","Save","Title","LocalizedName","Text","WeatherIcon","src","alt","WeatherText","moment","LocalObservationDateTime","format","IsDayTime","Temperature","Metric","Value","Body","Date","Day","Icon","IconPhrase","Minimum","Maximum","weatherResponses","getCurrent","setCityName","getWeather","to","Country","ID","getFavorites","filter","RemoveCity","propType","PropTypes","func","isRequired","array","bool","Footer","PagesNav","Navbar","expand","Brand","href","Weather","Toggle","aria-controls","Collapse","Nav","Link","faHome","initialState","action","combineReducers","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","path","exact","component","Home","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.5a911def.chunk.js","sourcesContent":["import React from 'react';\r\nimport propTypes from 'prop-types';\r\n// Redux\r\nimport { connect } from 'react-redux';\r\n\r\nconst Alert = ({ alerts }) =>\r\n  alerts !== null &&\r\n  alerts.length > 0 &&\r\n  alerts.map(alert => (\r\n    <div key={alert.id} className={`alert alert-${alert.alertType}`}>\r\n      {alert.msg}\r\n    </div>\r\n  ));\r\n\r\nAlert.propTypes = {\r\n  alerts: propTypes.array.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  alerts: state.alertReducer\r\n});\r\nexport default connect(mapStateToProps)(Alert);\r\n","import { SET_ALERT, REMOVE_ALERT } from './typesActions';\r\nimport uuid from 'uuid';\r\n\r\nexport const setAlert = (msg, alertType) => dispatch => {\r\n  const id = uuid.v4();\r\n  dispatch({\r\n    type: SET_ALERT,\r\n    payload: { msg, alertType, id }\r\n  });\r\n\r\n  setTimeout(() => dispatch({ type: REMOVE_ALERT, payload: id }), 5000);\r\n};\r\n","// Default city\r\nexport const GET_DEFAULT_WEATHER = 'GET_DEFAULT_WEATHER';\r\nexport const GET_DEFAULT_FAIL = 'GET_DEFAULT_FAIL';\r\n// Current weather\r\nexport const CURRENT_WEATHER = 'CURRENT_WEATHER';\r\n// 5 days daily\r\nexport const DAY_DAILY = 'DAY_DAILY';\r\n// Alert\r\nexport const SET_ALERT = 'SET_ALERT';\r\nexport const REMOVE_ALERT = 'REMOVE_ALERT';\r\n// City Name\r\nexport const CITY_NAME = 'CITY_NAME';\r\n// Fail\r\nexport const FAIL = 'FAIL';\r\n// Favorites current array\r\nexport const SET_CURRENT = 'SET_CURRENT';\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport { Form, Button, FormControl, Card } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport Alert from './layout/Alert';\r\n\r\nimport { faHeart } from '@fortawesome/free-solid-svg-icons';\r\nimport moment from 'moment';\r\n\r\n// Redux\r\nimport { connect } from 'react-redux';\r\nimport { getDefaultDetails } from '../actions/getWeatherAction';\r\nimport { setAlert } from '../actions/alertAction';\r\n\r\nconst Home = ({\r\n  getDefaultDetails,\r\n  getDefaultWeather,\r\n  currentWeather,\r\n  dayDaily,\r\n  DayTime,\r\n  City,\r\n  setAlert,\r\n  Fail\r\n}) => {\r\n  const didMount = useRef(false);\r\n\r\n  const [FavoritesData, SetFavorites] = useState([]);\r\n  const [getDetails, setDetails] = useState({\r\n    cityName: ''\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!didMount.current) {\r\n      didMount.current = true;\r\n      let Favorites = JSON.parse(localStorage.getItem('favorites')) || [];\r\n      SetFavorites(Favorites);\r\n      getDefaultDetails(City);\r\n    }\r\n  }, [getDefaultDetails, City]);\r\n\r\n  const onChange = e =>\r\n    setDetails({ ...getDetails, [e.target.name]: e.target.value });\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    getDefaultDetails(cityName);\r\n  };\r\n\r\n  const Save = e => {\r\n    e.preventDefault();\r\n    let Favorites = JSON.parse(localStorage.getItem('favorites')) || [];\r\n    if (!Favorites.length > 0) {\r\n      Favorites.push(getDefaultWeather);\r\n      setAlert('The city was successfully added to the list', 'success');\r\n      localStorage.setItem('favorites', JSON.stringify(Favorites));\r\n      return true;\r\n    } else {\r\n      for (var i = 0; i < Favorites.length; i++) {\r\n        if (Favorites[i].Key === getDefaultWeather.Key) {\r\n          return setAlert('The city is on the list', 'danger');\r\n        }\r\n      }\r\n      Favorites.push(getDefaultWeather);\r\n    }\r\n    setAlert('The city was successfully added to the list', 'success');\r\n    localStorage.setItem('favorites', JSON.stringify(Favorites));\r\n  };\r\n  if (Fail) {\r\n    setAlert('Server Error', 'danger');\r\n  }\r\n  const { cityName } = getDetails;\r\n  return (\r\n    <div className='Home'>\r\n      <main className='Main'>\r\n        <div className='container'>\r\n          <div className='header'>Welcome to the weather app</div>\r\n          <div className='mainText '>\r\n            Come see the weather anytime, anywhere.\r\n          </div>\r\n          <Form className='form' onSubmit={e => onSubmit(e)} inline>\r\n            <FormControl\r\n              type='text'\r\n              placeholder='Enter a city...'\r\n              className='mr-sm-2'\r\n              name='cityName'\r\n              value={cityName}\r\n              onChange={e => onChange(e)}\r\n            />\r\n            <Button type='submit' variant='outline-success'>\r\n              Search\r\n            </Button>\r\n          </Form>\r\n          <Alert />\r\n          <Card\r\n            bg='light'\r\n            text='white'\r\n            id='Card-height'\r\n            style={{ width: '100%' }}\r\n          >\r\n            <Card.Header>\r\n              {FavoritesData.map((city, index) => (\r\n                <span key={index}>\r\n                  {city.Key === getDefaultWeather.Key ? (\r\n                    <FontAwesomeIcon id='Favorites-icon' icon={faHeart} />\r\n                  ) : null}\r\n                </span>\r\n              ))}\r\n\r\n              <Button onClick={e => Save(e)} variant='dark'>\r\n                Add to Favorites\r\n              </Button>\r\n            </Card.Header>\r\n            <Card.Title>\r\n              <div>\r\n                <header className='weatherHeader'>\r\n                  {getDefaultWeather.LocalizedName}\r\n                </header>\r\n              </div>\r\n            </Card.Title>\r\n            <Card.Text>\r\n              {currentWeather.map(data => (\r\n                <span key='1'>\r\n                  {data.WeatherIcon < 10 ? (\r\n                    <img\r\n                      className='icon-weather'\r\n                      src={`https://developer.accuweather.com/sites/default/files/0${data.WeatherIcon}-s.png`}\r\n                      alt={data.WeatherText}\r\n                    />\r\n                  ) : (\r\n                    <img\r\n                      className='icon-weather'\r\n                      src={`https://developer.accuweather.com/sites/default/files/${data.WeatherIcon}-s.png`}\r\n                      alt={data.WeatherText}\r\n                    />\r\n                  )}\r\n\r\n                  <span className='WeatherText'>\r\n                    {moment(data.LocalObservationDateTime).format('dddd')},\r\n                    {data.IsDayTime ? <span>Day</span> : <span> Night</span>}\r\n                  </span>\r\n                  <span className='WeatherText'>{data.WeatherText}</span>\r\n                  <span className='Temperature'>\r\n                    {data.Temperature.Metric.Value}°\r\n                  </span>\r\n                </span>\r\n              ))}\r\n            </Card.Text>\r\n\r\n            <Card.Body>\r\n              {dayDaily.map((data, index) => (\r\n                <div key={index}>\r\n                  <div className='daysCards'>\r\n                    <Card bg='light' text='white' id='daysCards-card-size'>\r\n                      <Card.Header>\r\n                        {moment(data.Date).format('dddd')}\r\n                      </Card.Header>\r\n                      {/* Check if isDayTime */}\r\n                      {DayTime ? (\r\n                        <div>\r\n                          {data.Day.Icon < 10 ? (\r\n                            <img\r\n                              className='icon-weather'\r\n                              src={`https://developer.accuweather.com/sites/default/files/0${data.Day.Icon}-s.png`}\r\n                              alt={data.Day.IconPhrase}\r\n                            />\r\n                          ) : (\r\n                            <img\r\n                              className='icon-weather'\r\n                              src={`https://developer.accuweather.com/sites/default/files/${data.Day.Icon}-s.png`}\r\n                              alt={data.Day.IconPhrase}\r\n                            />\r\n                          )}\r\n                        </div>\r\n                      ) : (\r\n                        <div>\r\n                          {data.Day.Icon < 10 ? (\r\n                            <img\r\n                              className='icon-weather'\r\n                              src={`https://developer.accuweather.com/sites/default/files/0${data.Day.Icon}-s.png`}\r\n                              alt={data.Day.IconPhrase}\r\n                            />\r\n                          ) : (\r\n                            <img\r\n                              className='icon-weather'\r\n                              src={`https://developer.accuweather.com/sites/default/files/${data.Day.Icon}-s.png`}\r\n                              alt={data.Day.IconPhrase}\r\n                            />\r\n                          )}\r\n                        </div>\r\n                      )}\r\n\r\n                      <div className='text-icon '>{data.Day.IconPhrase}</div>\r\n                      <Card.Body>\r\n                        <Card.Text>\r\n                          <span className='text-temp'>\r\n                            Minimum {data.Temperature.Minimum.Value}F\r\n                          </span>\r\n                          <span className='text-temp'>\r\n                            Maximum {data.Temperature.Maximum.Value}F\r\n                          </span>\r\n                        </Card.Text>\r\n                      </Card.Body>\r\n                    </Card>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </Card.Body>\r\n          </Card>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\nHome.propTypes = {\r\n  getDefaultDetails: PropTypes.func.isRequired,\r\n  currentWeather: PropTypes.array,\r\n  dayDaily: PropTypes.array,\r\n  DayTime: PropTypes.bool,\r\n  City: PropTypes.string,\r\n  Fail: PropTypes.bool\r\n};\r\nconst mapStateToProps = state => ({\r\n  getDefaultWeather: state.getWeatherReducer.getDefaultWeather,\r\n  currentWeather: state.getWeatherReducer.currentWeather,\r\n  dayDaily: state.getWeatherReducer.dayDaily,\r\n  DayTime: state.getWeatherReducer.DayTime,\r\n  City: state.getWeatherReducer.City,\r\n  Fail: state.getWeatherReducer.Fail\r\n});\r\nexport default connect(mapStateToProps, { getDefaultDetails, setAlert })(Home);\r\n","import {\r\n  GET_DEFAULT_WEATHER,\r\n  CURRENT_WEATHER,\r\n  DAY_DAILY,\r\n  CITY_NAME,\r\n  FAIL,\r\n  SET_CURRENT\r\n} from './typesActions';\r\nimport axios from 'axios';\r\n\r\nexport const getDefaultDetails = cityName => async dispatch => {\r\n  const apiKey = 'NqPAKAodoRAPd13KdqtBB0ByB9MQrr1m';\r\n  try {\r\n    const res = await axios.get(\r\n      `http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${apiKey}&q=${cityName}`\r\n    );\r\n\r\n    dispatch({\r\n      type: GET_DEFAULT_WEATHER,\r\n      payload: res.data[0]\r\n    });\r\n    const resData = await axios.get(\r\n      `http://dataservice.accuweather.com/currentconditions/v1/${res.data[0].Key}?apikey=${apiKey}`\r\n    );\r\n    dispatch({\r\n      type: CURRENT_WEATHER,\r\n      payload: resData.data\r\n    });\r\n    const daysData = await axios.get(\r\n      `http://dataservice.accuweather.com/forecasts/v1/daily/5day/${res.data[0].Key}?apikey=${apiKey}`\r\n    );\r\n    dispatch({\r\n      type: DAY_DAILY,\r\n      payload: daysData.data.DailyForecasts\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: FAIL\r\n    });\r\n  }\r\n};\r\nexport const getCurrent = city => async dispatch => {\r\n  const apiKey = 'NqPAKAodoRAPd13KdqtBB0ByB9MQrr1m';\r\n  try {\r\n    const res = await axios.get(\r\n      `http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${apiKey}&q=${city}`\r\n    );\r\n    const resData = await axios.get(\r\n      `http://dataservice.accuweather.com/currentconditions/v1/${res.data[0].Key}?apikey=${apiKey}`\r\n    );\r\n    dispatch({\r\n      type: SET_CURRENT,\r\n      payload: resData.data[0]\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: FAIL\r\n    });\r\n  }\r\n};\r\nexport const setCityName = name => dispatch => {\r\n  dispatch({\r\n    type: CITY_NAME,\r\n    payload: name\r\n  });\r\n};\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\nimport { Button } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport Alert from './layout/Alert';\r\n\r\n// Redux\r\nimport { connect } from 'react-redux';\r\nimport { getCurrent } from '../actions/getWeatherAction';\r\nimport { setCityName } from '../actions/getWeatherAction';\r\nimport { setAlert } from '../actions/alertAction';\r\n\r\n// Favorites component\r\nconst Favorites = ({\r\n  weatherResponses,\r\n  getCurrent,\r\n  setCityName,\r\n  setAlert,\r\n  Fail\r\n}) => {\r\n  //useRef\r\n  const didMount = useRef(false);\r\n\r\n  // useState\r\n  const [FavoritesData, SetFavorites] = useState([]);\r\n  //effects\r\n  useEffect(() => {\r\n    if (!didMount.current) {\r\n      didMount.current = true;\r\n      let Favorites = JSON.parse(localStorage.getItem('favorites')) || [];\r\n      SetFavorites(Favorites);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getWeather = Favorites => {\r\n      if (Favorites.length > 0) {\r\n        for (let i = 0; i < Favorites.length; i++) {\r\n          getCurrent(Favorites[i].LocalizedName);\r\n        }\r\n      }\r\n    };\r\n    getWeather(FavoritesData);\r\n  }, [FavoritesData, getCurrent]);\r\n\r\n  // Function that remove city from the list\r\n  const RemoveCity = key => {\r\n    let getFavorites = FavoritesData.filter(city => city.Key !== key);\r\n    localStorage.setItem('favorites', JSON.stringify(getFavorites));\r\n    SetFavorites(getFavorites);\r\n    setAlert('The city was deleted from the list', 'danger');\r\n  };\r\n\r\n  if (Fail) {\r\n    setAlert('Server Error', 'danger');\r\n  }\r\n\r\n  return (\r\n    <div className='Favorites'>\r\n      <main className='Main'>\r\n        <div className='container'>\r\n          <div className='header'> Your Favorites Cities</div>\r\n          <Alert />\r\n          <div className='card-att'>\r\n            {FavoritesData.length > 0\r\n              ? FavoritesData.map((city, i) => (\r\n                  <div key={i}>\r\n                    <Card style={{ width: '18rem' }}>\r\n                      <Link\r\n                        to='/'\r\n                        onClick={() => setCityName(city.LocalizedName)}\r\n                      >\r\n                        <Card.Header>\r\n                          {city.LocalizedName}, {city.Country.ID}\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                          <Card.Text>\r\n                            <span>\r\n                              {weatherResponses.map((data, index) => (\r\n                                <span key={index}>\r\n                                  {index === i ? (\r\n                                    <span>\r\n                                      {data.WeatherIcon < 10 ? (\r\n                                        <img\r\n                                          className='icon-weather'\r\n                                          src={`https://developer.accuweather.com/sites/default/files/0${data.WeatherIcon}-s.png`}\r\n                                          alt={data.WeatherText}\r\n                                        />\r\n                                      ) : (\r\n                                        <img\r\n                                          className='icon-weather'\r\n                                          src={`https://developer.accuweather.com/sites/default/files/${data.WeatherIcon}-s.png`}\r\n                                          alt={data.WeatherText}\r\n                                        />\r\n                                      )}\r\n\r\n                                      <span className='WeatherText'>\r\n                                        {moment(\r\n                                          data.LocalObservationDateTime\r\n                                        ).format('dddd')}\r\n                                        ,\r\n                                        {data.IsDayTime ? (\r\n                                          <span>Day</span>\r\n                                        ) : (\r\n                                          <span>Night</span>\r\n                                        )}\r\n                                      </span>\r\n                                      <span className='WeatherText'>\r\n                                        {data.WeatherText}\r\n                                      </span>\r\n                                      <span className='Temperature'>\r\n                                        {data.Temperature.Metric.Value}°\r\n                                      </span>\r\n                                    </span>\r\n                                  ) : null}\r\n                                </span>\r\n                              ))}\r\n                            </span>\r\n                          </Card.Text>\r\n                        </Card.Body>\r\n                      </Link>\r\n                      <Button\r\n                        onClick={() => RemoveCity(city.Key)}\r\n                        variant='outline-success'\r\n                      >\r\n                        Remove\r\n                      </Button>\r\n                    </Card>\r\n                  </div>\r\n                ))\r\n              : null}\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nFavorites.propType = {\r\n  getCurrent: PropTypes.func.isRequired,\r\n  weatherResponses: PropTypes.array,\r\n  Fail: PropTypes.bool\r\n};\r\nconst mapStateToProps = state => ({\r\n  weatherResponses: state.getWeatherReducer.weatherResponses,\r\n  Fail: state.getWeatherReducer.Fail\r\n});\r\nexport default connect(mapStateToProps, {\r\n  getCurrent,\r\n  setCityName,\r\n  setAlert\r\n})(Favorites);\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className='footer Footer-top Footer-Padding'>\r\n      <div>&copy; 2019 Eden Elmalich</div>\r\n    </footer>\r\n  );\r\n};\r\nexport default Footer;\r\n","import React from 'react';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHome, faHeart } from '@fortawesome/free-solid-svg-icons';\r\nimport Weather from '../img/Weather.png';\r\nconst PagesNav = () => {\r\n  return (\r\n    <div className='Nav'>\r\n      <Navbar bg='light' expand='lg'>\r\n        <Navbar.Brand href='/'>\r\n          <img id='logo-size' src={Weather} alt='Weather logo' />\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls='basic-navbar-nav' />\r\n        <Navbar.Collapse id='basic-navbar-nav'>\r\n          <Nav className='mr-auto'>\r\n            <Nav.Link href='/'>\r\n              <FontAwesomeIcon icon={faHome} />\r\n              Home\r\n            </Nav.Link>\r\n            <Nav.Link href='/Favorites'>\r\n              <FontAwesomeIcon icon={faHeart} />\r\n              Favorites\r\n            </Nav.Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\nexport default PagesNav;\r\n","import {\r\n  GET_DEFAULT_WEATHER,\r\n  CURRENT_WEATHER,\r\n  DAY_DAILY,\r\n  CITY_NAME,\r\n  FAIL,\r\n  SET_CURRENT\r\n} from '../actions/typesActions';\r\nconst initialState = {\r\n  getDefaultWeather: [],\r\n  currentWeather: [],\r\n  dayDaily: [],\r\n  DayTime: null,\r\n  City: 'tel aviv',\r\n  Fail: false,\r\n  weatherResponses: []\r\n};\r\nconst getWeatherReducer = (state = initialState, action) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case GET_DEFAULT_WEATHER:\r\n      return {\r\n        ...state,\r\n        getDefaultWeather: payload\r\n      };\r\n    case CURRENT_WEATHER:\r\n      return {\r\n        ...state,\r\n        currentWeather: payload,\r\n        DayTime: payload[0].IsDayTime\r\n      };\r\n    case DAY_DAILY:\r\n      return { ...state, dayDaily: payload };\r\n    case CITY_NAME:\r\n      return { ...state, City: payload };\r\n    case SET_CURRENT:\r\n      return {\r\n        ...state,\r\n        weatherResponses: [...state.weatherResponses, payload]\r\n      };\r\n    case FAIL:\r\n      return { ...state, Fail: true };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default getWeatherReducer;\r\n","import { SET_ALERT, REMOVE_ALERT } from '../actions/typesActions';\r\nconst initialState = [];\r\n\r\nconst alertReducer = (state = initialState, action) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case SET_ALERT:\r\n      return [...state, payload];\r\n    case REMOVE_ALERT:\r\n      return state.filter(alert => alert.id !== payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default alertReducer;\r\n","import { combineReducers } from 'redux';\r\nimport getWeatherReducer from './getWeatherReducer';\r\nimport alertReducer from './alertReducer';\r\n\r\nexport default combineReducers({\r\n  getWeatherReducer,\r\n  alertReducer\r\n});\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n// Components\nimport Home from './components/Home';\nimport Favorites from './components/Favorites';\nimport Footer from './components/Footer';\nimport PagesNav from './components/PagesNav';\n// CSS\nimport './css/Weather.css';\n// Redux\nimport store from './store';\nimport { Provider } from 'react-redux';\nfunction App() {\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <PagesNav />\n        <div className='App'>\n          <Switch>\n            <Route path='/' exact component={Home} />\n            <Route path='/Favorites' component={Favorites} />\n          </Switch>\n          <Footer />\n        </div>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/Weather.77ca0ddf.png\";"],"sourceRoot":""}